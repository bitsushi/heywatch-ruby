#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + "/../lib"
require "rubygems"
require "heywatch"

RestClient.log = "stderr" if ENV["DEBUG"]
config_file = "#{ENV["HOME"]}/.heywatch"

if File.exists?(config_file)
  user, passwd = File.read(config_file).split("\n")
else
  puts "HeyWatch username:"
  user = $stdin.gets.chomp
  puts "HeyWatch password:"
  system "stty -echo"
  passwd = $stdin.gets.chomp
  system "stty echo"
  
  # testing credentials
  begin
    HeyWatch.new(user, passwd)  
    File.open(config_file, "w") {|f| f.write("#{user}\n#{passwd}") }
    File.chmod(0600, config_file)
    puts "Your credentials have been saved in this file #{config_file} (0600)"
    exit
  rescue => e
    puts "Wrong login or password."
    exit
  end
end

hw = HeyWatch.new(user, passwd)

begin
  if ARGV.empty?
    puts %(Usage: heywatch RESOURCE:METHOD [ID] [parameter1=value1 parameter2=value2 ...]

    Resources:

      account       # account information
      video         # manage video         | all, info, delete, count, bin            
      encoded_video # manage encoded video | all, info, delete, count, bin, jpg       
      download      # manage download      | all, info, delete, count, create         
      job           # manage job           | all, info, delete, count, create         
      format        # manage format        | all, info, delete, count, create, update 
    
    Usage:
    
      heywatch account
      heywatch video:info 123456
      heywatch job:all
      heywatch download:create url=http://site.com/video.mp4 title=mytitle
      heywatch encoded_video:jpg 9882322 start=4 > thumb.jpg
      heywatch format:all owner=true video_codec=h264
      heywatch video:all "[0]"
      heywatch job:all "[0..10]"
      heywatch format:count owner=true
    )
    exit
  end
  
  if ARGV[0] == "account"
    puts JSON.pretty_generate(hw.account)
    exit
  end
  
  resource, method = ARGV[0].split(":")
  params = ARGV[1..-1]

  $stderr.puts [resource, method, params].inspect if ENV["DEBUG"]
  
  if method == "create"
    params = Hash[*ARGV[1..-1].map{|p| k,v = p.split("=") }.flatten]
    puts JSON.pretty_generate(hw.send(method, *[resource, params]))
    exit
  end
  
  if method == "update"
    params = Hash[*ARGV[2..-1].map{|p| k,v = p.split("=") }.flatten]
    puts JSON.pretty_generate(hw.send(method, *[resource, ARGV[1], params]))
    exit
  end
  
  if method == "jpg"
    params = Hash[*ARGV[2..-1].map{|p| k,v = p.split("=") }.flatten]
    puts hw.send(method, *[ARGV[1], params])
    exit
  end

  if method == "bin"
    puts hw.send(method, *[resource, ARGV[1]])
    exit
  end
  
  if params.empty?
    res = hw.send(method, resource)
    if method == "count"
      puts res
      exit
    end
    
    puts JSON.pretty_generate(res)
    exit
  end
  
  if params.last =~ /\[([0-9\.-]+)\]/
    offset = eval($1)
    params = params[0..-2]
  end

  res = hw.send(method, *[resource, params])
  if res == true
    puts "ok"
    exit
  end
  
  if res.is_a?(Fixnum)
    puts res
    exit
  end
  
  if res.empty?
    exit
  end
  
  res = res[offset] if offset
  
  puts JSON.pretty_generate(res)
  exit
  
rescue => e
  puts e
  puts e.backtrace.join("\n") if ENV["DEBUG"]
end